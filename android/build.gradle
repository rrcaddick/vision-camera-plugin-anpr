import java.nio.file.Paths
import org.gradle.api.GradleException

buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["VisionCameraPluginAnpr_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

subprojects {
  afterEvaluate { project ->
      if (project.hasProperty("android")) {
          project.android {
              defaultConfig {
                  minSdkVersion = 30
              }
          }
      }
    }
}

task printNdkVersion {
    doLast {
        println "Library NDK Version: ${android.ndkVersion}"
    }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["VisionCameraPluginAnpr_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["VisionCameraPluginAnpr_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

// Get the path to the example project assets if it exists
static def findExampleAssetsDir(baseDir) {
    def currentDir = baseDir.toPath().normalize()
    def exampleAssetsPath = Paths.get(currentDir.parent.toString(), "example", "assets", "openalpr")
    
    if (exampleAssetsPath.toFile().isDirectory()) {
        return exampleAssetsPath.toString()
    }
    
    return null
}

// Check for custom react native assets
static def findReactNativeAssetsDir(baseDir) {
    def basePath = baseDir.toPath().normalize()
    
    while (basePath != null) {
        def packageJsonPath = Paths.get(basePath.toString(), "package.json")
        def assetsPath = Paths.get(basePath.toString(), "assets", "openalpr")
              
        if (packageJsonPath.toFile().exists() && assetsPath.toFile().isDirectory()) {
            return assetsPath.toString()
        }
        
        basePath = basePath.getParent()
    }
    
    // If we haven't found the assets, check for the example assets 
    return findExampleAssetsDir(baseDir)
}

def assetsPath = findReactNativeAssetsDir(project.projectDir)

android {
  if (supportsNamespace()) {
    namespace "com.visioncamerapluginanpr"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
        if (assetsPath != null) {
          assets.srcDirs += [assetsPath]
        }
      }
    }
  }

  buildFeatures {
    prefab true
  }

  ndkVersion "27.0.11902837"
  compileSdkVersion 34

  defaultConfig {
    minSdkVersion 30
    targetSdkVersion 30
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

    externalNativeBuild {
        cmake {
            cppFlags "-O2 -frtti -fexceptions -Wall -fstack-protector-all -std=c++17"
            abiFilters (*reactNativeArchitectures())
            arguments "-DANDROID_STL=c++_shared", "-DANDROID_PLATFORM=android-30"
        }
    }
  }
  
  packagingOptions {
    excludes = [
      "META-INF",
      "META-INF/**",
      "**/libc++_shared.so",
      "**/libfbjni.so",
      "**/libjsi.so",
      "**/libreactnativejni.so",
      "**/libturbomodulejsijni.so",
      "**/libreact_nativemodule_core.so",
    ]
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += [
          "src/newarch",
          // This is needed to build Kotlin project with NewArch enabled
          "${project.buildDir}/generated/source/codegen/java"
        ]
      } else {
        java.srcDirs += ["src/oldarch"]
      }
    }
  }
}


repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  api project(":react-native-vision-camera")
  
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "VisionCameraPluginAnpr"
    codegenJavaPackageName = "com.visioncamerapluginanpr"
  }
}
